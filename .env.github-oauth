# Kafka Schema Registry MCP Demo Environment Configuration
# GitHub OAuth Edition - Copy this file to .env and modify as needed

# ===========================================
# GitHub OAuth Configuration
# ===========================================

# Required: Create GitHub OAuth App at https://github.com/settings/developers
# Application name: Kafka Schema Registry MCP Demo
# Homepage URL: http://localhost:3000
# Authorization callback URL: http://localhost:38000/auth/callback

GITHUB_CLIENT_ID=your_github_client_id_here
GITHUB_CLIENT_SECRET=your_github_client_secret_here

# GitHub Organization (optional - for team-based access control)
GITHUB_ORG=kafka-schema-mcp-demos

# GitHub Team Mapping (optional - requires organization)
GITHUB_TEAM_READ=community     # Team with read access
GITHUB_TEAM_WRITE=developers   # Team with write access  
GITHUB_TEAM_ADMIN=maintainers  # Team with admin access

# ===========================================
# Development Mode (for testing)
# ===========================================

# Set to true to bypass OAuth for local development
DEV_MODE=false

# Personal Access Token for development (optional)
# Create at: https://github.com/settings/personal-access-tokens
# Scopes needed: repo, public_repo, admin:org (if using organization)
DEV_GITHUB_TOKEN=ghp_your_personal_access_token_here

# ===========================================
# Performance Optimization (v2.0.6+)
# ===========================================

# SLIM_MODE reduces tool count from 57+ to ~9 essential tools
# Recommended for demos and production read-only operations
# Set to false only if you need advanced features like bulk migrations
SLIM_MODE=true

# ===========================================
# Multi-Registry Configuration
# ===========================================

# Development Registry
SCHEMA_REGISTRY_NAME_1=development
SCHEMA_REGISTRY_URL_1=http://dev-registry:8081
SCHEMA_REGISTRY_USER_1=
SCHEMA_REGISTRY_PASSWORD_1=
VIEWONLY_1=false

# Staging Registry
SCHEMA_REGISTRY_NAME_2=staging
SCHEMA_REGISTRY_URL_2=http://staging-registry:8081
SCHEMA_REGISTRY_USER_2=
SCHEMA_REGISTRY_PASSWORD_2=
VIEWONLY_2=false

# Production Registry (Read-only for safety)
SCHEMA_REGISTRY_NAME_3=production
SCHEMA_REGISTRY_URL_3=http://prod-registry:8081
SCHEMA_REGISTRY_USER_3=
SCHEMA_REGISTRY_PASSWORD_3=
VIEWONLY_3=true

# ===========================================
# Demo UI Configuration
# ===========================================

REACT_APP_MCP_SERVER_URL=http://localhost:38000
REACT_APP_AUTH_PROVIDER=github

# ===========================================
# Monitoring Configuration
# ===========================================

# Grafana (also supports GitHub OAuth)
GF_SECURITY_ADMIN_PASSWORD=admin123

# ===========================================
# External URLs (for cloud deployment)
# ===========================================

# Public URLs when deployed to cloud
# PUBLIC_MCP_URL=https://demo.kafka-schema-mcp.com
# PUBLIC_UI_URL=https://ui.kafka-schema-mcp.com
# GITHUB_CALLBACK_URL=https://demo.kafka-schema-mcp.com/auth/callback

# ===========================================
# Advanced Configuration
# ===========================================

# Log levels
LOG_LEVEL=INFO
KAFKA_LOG_LEVEL=WARN

# Performance tuning
KAFKA_HEAP_OPTS=-Xms512M -Xmx1G
SCHEMA_REGISTRY_HEAP_OPTS=-Xms256M -Xmx512M

# Security settings (for production)
# SSL_ENABLED=true
# SSL_CERT_PATH=/etc/ssl/certs
# SSL_KEY_PATH=/etc/ssl/private

# ===========================================
# GitHub OAuth Setup Instructions
# ===========================================

# 1. Go to https://github.com/settings/developers
# 2. Click "New OAuth App"
# 3. Fill in:
#    - Application name: Kafka Schema Registry MCP Demo
#    - Homepage URL: http://localhost:3000
#    - Authorization callback URL: http://localhost:38000/auth/callback
# 4. Copy Client ID and Client Secret to this file
# 5. (Optional) Create GitHub organization: kafka-schema-mcp-demos
# 6. (Optional) Create teams: community, developers, maintainers
# 7. Run: docker-compose -f docker-compose.github-oauth.yml up -d

# ===========================================
# GitHub Permissions Mapping
# ===========================================

# GitHub Scope -> MCP Permission
# public_repo  -> read   (view schemas, subjects, configurations)
# repo         -> write  (register schemas, update configs + read)
# admin:org    -> admin  (delete subjects, manage registries + write + read)

# ===========================================
# Benefits of GitHub OAuth
# ===========================================

# ✅ No separate OAuth provider (Keycloak) needed
# ✅ Developers already have GitHub accounts
# ✅ Familiar OAuth flow
# ✅ Organization/team integration
# ✅ Faster startup time
# ✅ Lower resource usage
# ✅ Production-ready OAuth provider
# ✅ Built-in audit logging
# ✅ Fine-grained permissions
# ✅ SLIM_MODE for optimal performance (v2.0.6+)
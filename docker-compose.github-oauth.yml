# Kafka Schema Registry MCP Demo Environment - GitHub OAuth Edition
# Simplified setup with GitHub OAuth instead of Keycloak

version: '3.8'

services:
  # ===========================================
  # Kafka Infrastructure
  # ===========================================
  
  # Shared Kafka instance for all registries
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: demo-kafka
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      CLUSTER_ID: demo-cluster-kafka-schema-mcp
    volumes:
      - kafka-data:/var/lib/kafka/data
    ports:
      - "9092:9092"
    healthcheck:
      test: kafka-topics --bootstrap-server localhost:9092 --list
      interval: 10s
      timeout: 5s
      retries: 5

  # ===========================================
  # Schema Registry Instances
  # ===========================================

  # Development Schema Registry - Full Access
  dev-registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: demo-dev-registry
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      SCHEMA_REGISTRY_HOST_NAME: dev-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_SCHEMA_REGISTRY_GROUP_ID: dev-schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: _schemas_dev
      SCHEMA_REGISTRY_DEBUG: true
    ports:
      - "8081:8081"
    healthcheck:
      test: curl -f http://localhost:8081/subjects || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

  # Staging Schema Registry - Limited Write Access  
  staging-registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: demo-staging-registry
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      SCHEMA_REGISTRY_HOST_NAME: staging-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_SCHEMA_REGISTRY_GROUP_ID: staging-schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: _schemas_staging
    ports:
      - "8082:8081"
    healthcheck:
      test: curl -f http://localhost:8081/subjects || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

  # Production Schema Registry - Read-Only for Most Users
  prod-registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: demo-prod-registry
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      SCHEMA_REGISTRY_HOST_NAME: prod-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_SCHEMA_REGISTRY_GROUP_ID: prod-schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: _schemas_prod
    ports:
      - "8083:8081"
    healthcheck:
      test: curl -f http://localhost:8081/subjects || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

  # ===========================================
  # MCP Server - Multi-Registry with GitHub OAuth
  # ===========================================
  
  mcp-server:
    image: aywengo/kafka-schema-reg-mcp:stable
    container_name: demo-mcp-server
    depends_on:
      dev-registry:
        condition: service_healthy
      staging-registry:
        condition: service_healthy
      prod-registry:
        condition: service_healthy
    environment:
      # GitHub OAuth Configuration
      ENABLE_AUTH: "true"
      AUTH_PROVIDER: "github"
      GITHUB_CLIENT_ID: "${GITHUB_CLIENT_ID}"
      GITHUB_CLIENT_SECRET: "${GITHUB_CLIENT_SECRET}"
      GITHUB_ORG: "${GITHUB_ORG:-kafka-schema-mcp-demos}"
      GITHUB_CALLBACK_URL: "http://localhost:38000/auth/callback"
      
      # GitHub Team Mapping (Optional)
      GITHUB_TEAM_READ: "${GITHUB_TEAM_READ:-community}"
      GITHUB_TEAM_WRITE: "${GITHUB_TEAM_WRITE:-developers}"
      GITHUB_TEAM_ADMIN: "${GITHUB_TEAM_ADMIN:-maintainers}"
      
      # Multi-Registry Configuration
      SCHEMA_REGISTRY_NAME_1: "development"
      SCHEMA_REGISTRY_URL_1: "http://dev-registry:8081"
      VIEWONLY_1: "false"
      
      SCHEMA_REGISTRY_NAME_2: "staging"
      SCHEMA_REGISTRY_URL_2: "http://staging-registry:8081"
      VIEWONLY_2: "false"
      
      SCHEMA_REGISTRY_NAME_3: "production"
      SCHEMA_REGISTRY_URL_3: "http://prod-registry:8081"
      VIEWONLY_3: "true"
      
      # Performance Optimization - Recommended for demos
      SLIM_MODE: "${SLIM_MODE:-true}"
      
      # Development Mode (for local testing without OAuth)
      DEV_MODE: "${DEV_MODE:-false}"
      DEV_GITHUB_TOKEN: "${DEV_GITHUB_TOKEN:-}"
    ports:
      - "38000:8000"
    volumes:
      - ./scripts:/opt/scripts
    healthcheck:
      test: curl -f http://localhost:8000/health || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

  # ===========================================
  # Demo Web UI with GitHub OAuth
  # ===========================================
  
  demo-ui:
    build:
      context: ./demo-ui
      dockerfile: Dockerfile
    container_name: demo-web-ui
    depends_on:
      mcp-server:
        condition: service_healthy
    environment:
      REACT_APP_MCP_SERVER_URL: http://localhost:38000
      REACT_APP_GITHUB_CLIENT_ID: "${GITHUB_CLIENT_ID}"
      REACT_APP_GITHUB_ORG: "${GITHUB_ORG:-kafka-schema-mcp-demos}"
      REACT_APP_AUTH_PROVIDER: github
    ports:
      - "3000:3000"
    volumes:
      - ./demo-ui/src:/app/src
      - ./demo-ui/public:/app/public

  # ===========================================
  # Monitoring (Optional)
  # ===========================================
  
  prometheus:
    image: prom/prometheus:latest
    container_name: demo-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus

  grafana:
    image: grafana/grafana:latest
    container_name: demo-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_AUTH_GITHUB_ENABLED: "true"
      GF_AUTH_GITHUB_CLIENT_ID: "${GITHUB_CLIENT_ID}"
      GF_AUTH_GITHUB_CLIENT_SECRET: "${GITHUB_CLIENT_SECRET}"
      GF_AUTH_GITHUB_SCOPES: "user:email,read:org"
      GF_AUTH_GITHUB_AUTH_URL: "https://github.com/login/oauth/authorize"
      GF_AUTH_GITHUB_TOKEN_URL: "https://github.com/login/oauth/access_token"
      GF_AUTH_GITHUB_API_URL: "https://api.github.com/user"
      GF_AUTH_GITHUB_ALLOWED_ORGANIZATIONS: "${GITHUB_ORG:-kafka-schema-mcp-demos}"
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources

volumes:
  kafka-data:
  prometheus-data:
  grafana-data:

networks:
  default:
    name: kafka-schema-mcp-demo

# ===========================================
# GitHub OAuth Benefits:
# ===========================================
# ✅ Simplified setup (no Keycloak)
# ✅ Faster startup time
# ✅ Developer-friendly authentication
# ✅ Real OAuth flows
# ✅ Organization/team integration
# ✅ Reduced resource usage
# ✅ Production-ready OAuth provider
# ✅ SLIM_MODE for better performance (v2.0.6+)